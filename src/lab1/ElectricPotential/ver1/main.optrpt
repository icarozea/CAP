Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.6.0 Build 20220226_000000

Compiler options: -I. -g -std=c++11 -O2 -xHost -qopt-report=5 -qopt-report-phase=vec -qopt-report-filter=main.cc,15-25 -c -o main.o

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


      LOOP BEGIN at main.cc(21,5) inlined into main.cc(75,13)
         remark #15415: vectorization support: non-unit strided load was generated for the variable <chg->x[i]>, stride is 5   [ main.cc(23,24) ]
         remark #15415: vectorization support: non-unit strided load was generated for the variable <chg->y[i]>, stride is 5   [ main.cc(24,24) ]
         remark #15415: vectorization support: non-unit strided load was generated for the variable <chg->z[i]>, stride is 5   [ main.cc(25,24) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.292
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         remark #15452: unmasked strided loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 70 
         remark #15477: vector cost: 14.120 
         remark #15478: estimated potential speedup: 4.940 
         remark #15488: --- end vector cost summary ---
      LOOP END
===========================================================================

Begin optimization report for: CalculateElectricPotential(int, const Charge *, float, float, float, float &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at main.cc(21,5)
<Multiversioned v1>
   remark #15415: vectorization support: non-unit strided load was generated for the variable <chg->x[i]>, stride is 5   [ main.cc(23,24) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <chg->y[i]>, stride is 5   [ main.cc(24,24) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <chg->z[i]>, stride is 5   [ main.cc(25,24) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.296
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #15452: unmasked strided loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 72 
   remark #15477: vector cost: 14.370 
   remark #15478: estimated potential speedup: 4.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at main.cc(21,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.148
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at main.cc(21,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================
