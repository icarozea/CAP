Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.7.0 Build 20220726_000000

Compiler options: -I. -c -o nbody_routines.o -O2 -g -qopt-report=3 -xhost

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: bodyForce(body *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodyForce(body *, float, int)) [1] nbody_routines.c(4,42)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody_routines.c(6,2)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody_routines.c(9,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 78 
      remark #15477: vector cost: 23.870 
      remark #15478: estimated potential speedup: 3.090 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody_routines.c(9,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 78 
      remark #15477: vector cost: 23.870 
      remark #15478: estimated potential speedup: 3.090 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody_routines.c(4,42):remark #34051: REGISTER ALLOCATION : [bodyForce] nbody_routines.c:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r12 r14-r15 zmm0-zmm31 k0-k1]
        
    Routine temporaries
        Total         :     182
            Global    :      33
            Local     :     149
        Regenerable   :       6
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [1.21e-01 ~ 0.1%]
            Writes    :       3 [5.38e-02 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: integrate(body *, float, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (integrate(body *, float, int)) [2] nbody_routines.c(32,41)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody_routines.c(33,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between p->x[i] (34:3) and p->z[i] (36:3)
LOOP END

    Report from: Code generation optimizations [cg]

nbody_routines.c(32,41):remark #34051: REGISTER ALLOCATION : [integrate] nbody_routines.c:32

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm3]
        
    Routine temporaries
        Total         :      26
            Global    :      16
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
